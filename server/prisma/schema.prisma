generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int            @id @default(autoincrement())
  email               String         @unique
  password            String?
  isVerified          Boolean        @default(false)
  isActive            Boolean        @default(true)
  verificationLink    String?
  username            String?
  role                Int            @default(2000)
  salesforceAccountId String?
  jiraAccountId       String?
  Token               Token[]
  victimHistory       AdminHistory[] @relation("victimHistory")
  initiatorHistory    AdminHistory[] @relation("initiatorHistory")
  Template            Template[]
  TemplateUser        TemplateUser[]
  Like                Like[]
  Comment             Comment[]
  Form                Form[]

  @@map("users")
}

model Token {
  id           Int    @id @default(autoincrement())
  userId       Int
  refreshToken String @unique()
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}

model AdminHistory {
  id          Int      @id @default(autoincrement())
  action_type String
  new_value   String
  initiatorId Int
  victimId    Int
  createdAt   DateTime @default(now())
  victim      User     @relation("victimHistory", fields: [victimId], references: [id], onDelete: Cascade)
  initiator   User     @relation("initiatorHistory", fields: [initiatorId], references: [id], onDelete: Cascade)

  @@map("admin_history")
}

model Template {
  id                       Int            @id @default(autoincrement())
  title                    String
  description              String
  createdAt                DateTime       @default(now())
  topicId                  Int            @default(1)
  userId                   Int?
  image                    String?
  mode                     String?        @default("public") // public or strict
  customString1State       String         @default("NOT_PRESENT")
  customString1Question    String?
  customString1Description String?
  customString2State       String         @default("NOT_PRESENT")
  customString2Question    String?
  customString2Description String?
  customString3State       String         @default("NOT_PRESENT")
  customString3Question    String?
  customString3Description String?
  customString4State       String         @default("NOT_PRESENT")
  customString4Question    String?
  customString4Description String?
  customInt1State          String         @default("NOT_PRESENT")
  customInt1Question       String?
  customInt1Description    String?
  customInt2State          String         @default("NOT_PRESENT")
  customInt2Question       String?
  customInt2Description    String?
  customInt3State          String         @default("NOT_PRESENT")
  customInt3Question       String?
  customInt3Description    String?
  customInt4State          String         @default("NOT_PRESENT")
  customInt4Question       String?
  customInt4Description    String?
  customText1State         String         @default("NOT_PRESENT")
  customText1Question      String?
  customText1Description   String?
  customText2State         String         @default("NOT_PRESENT")
  customText2Question      String?
  customText2Description   String?
  customText3State         String         @default("NOT_PRESENT")
  customText3Question      String?
  customText3Description   String?
  customText4State         String         @default("NOT_PRESENT")
  customText4Question      String?
  customText4Description   String?
  customBool1State         String         @default("NOT_PRESENT")
  customBool1Question      String?
  customBool1Description   String?
  customBool2State         String         @default("NOT_PRESENT")
  customBool2Question      String?
  customBool2Description   String?
  customBool3State         String         @default("NOT_PRESENT")
  customBool3Question      String?
  customBool3Description   String?
  customBool4State         String         @default("NOT_PRESENT")
  customBool4Question      String?
  customBool4Description   String?
  topic                    Topic          @relation(fields: [topicId], references: [id], onDelete: SetDefault)
  user                     User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags                     TemplateTag[]
  allowedUsers             TemplateUser[]
  like                     Like[]
  comment                  Comment[]
  form                     Form[]

  @@map("templates")
}

model Tag {
  id        Int           @id @default(autoincrement())
  name      String        @unique
  templates TemplateTag[]

  @@map("tags")
}

model TemplateTag {
  templateId Int
  tagId      Int
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([tagId, templateId])
  @@map("templates_tags")
}

model TemplateUser {
  id         Int      @id @default(autoincrement())
  templateId Int
  userId     Int
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("templates_users")
}

model Topic {
  id       Int        @id @default(autoincrement())
  name     String
  Template Template[]

  @@map("topics")
}

model Like {
  templateId Int
  userId     Int
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@id([userId, templateId])
  @@map("likes")
}

model Comment {
  id         Int      @id @default(autoincrement())
  text       String
  templateId Int
  userId     Int
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@map("comments")
}

model Form {
  id                  Int      @id @default(autoincrement())
  userId              Int
  templateId          Int
  createdAt           DateTime @default(now())
  customString1Answer String?
  customString2Answer String?
  customString3Answer String?
  customString4Answer String?
  customInt1Answer    Int?
  customInt2Answer    Int?
  customInt3Answer    Int?
  customInt4Answer    Int?
  customText1Answer   String?
  customText2Answer   String?
  customText3Answer   String?
  customText4Answer   String?
  customBool1Answer   Boolean?
  customBool2Answer   Boolean?
  customBool3Answer   Boolean?
  customBool4Answer   Boolean?
  template            Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("forms")
}
